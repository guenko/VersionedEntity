h1. Versioned Entity

h2. Intention

This is an implementation of persistent entities providing versioning features. It is a Java implementation based on JPA entities.

You may use this approach if you   

* have the need to know when a data change occurred in the past, thus knowing the history of an entity

* want to retrieve data valid at a certain point in time in the past or even in the future, e.g. your customer has ordered yesterday and you want to bill the product price valid at order time yesterday 

* want to do an insert, update or removal not immediately but at a certain point in time in the future, e.g. a product price change shall take effect at 0:00 tomorrow.

h2. Concepts

Versioning in the context of this project means:

* a versioned entity holds a valid-from and a valid-to point in time attribute

* inserting an entity will insert an entity to the database valid from a certain time on  

* updating an entity will leave a history version with the previously valid data

* removing an entity will mark the entity invalid from a certain time on

All data manipulation may be effective as of now or some time in the future. It is not possible to change past events or data.

h2. Usage example

To be versioned your particular entity has to be derived from the VersionedEntity base class like this:

bc. @Entity
public class VersionedUser extends VersionedEntity {
  @Column(nullable = false)
  private String username;
  ...

Your particular DAO has to derive from VersionedDao<YourEntityClass> and hands over the entity manager at construction time or later by means of the @init()@ method. You may also implement particular retrieval methods (e.g. findByUsername) using base class helper methods:

bc. public class VersionedUserDao extends VersionedDao<VersionedUser> {
  public VersionedUserDao() {
    super(VersionedUser.class);
  }
  public VersionedUserDao(EntityManager entityManager) {
    this();
    init(entityManager);
  }
  @Override
  public void init(EntityManager entityManager) {
    super.init(entityManager);
  }
  public VersionedUser findByUsername(final String username, Date effectiveTime) {
    effectiveTime = TimeHelper.getNowIfNull(effectiveTime);
    return getSingleResult(getAttributeEqualsQueryVersioned("username", username, effectiveTime));
  }
...

To provide an EJB bean you derive from your particular DOA, there is nothing special for the versioning feature:

bc. @Stateless
public class VersionedUserServiceBean extends VersionedUserDao implements VersionedUserService {
  @PersistenceContext
  protected EntityManager entityManager;
  @PostConstruct
  void init() {
    init(entityManager);
  }
}

To access your entity in the plain way you may insert, update or remove an versioned entity as simple as in a non-versioned way:

bc. @EJB
VersionedUserService versionedUserService;
VersionedUser user;
user = new VersionedUser(....);
versionedUserService.insert(user);
user.setXYZ("abc");
versionedUserService.update(user);
versionedUserService.remove(user);

After this you may retrieve the entity version, either valid at now:

bc. user = versionedUserService.findByUsername("userX", null);

or valid at some time in the past or in the future:
  
bc. Date effective = ...
user = versionedUserService.findByUsername("userX", effective);

If you may want to retrieve all versions of your entity:

bc. List<VersionedUser> userVersions = versionedUserService.getVersions(user);

or you may want to retrieve all versions from all your entities:

bc. List<VersionedUser> userVersions = versionedUserService.findAllVersions();

If you like to do data manipulation not for now but effective at some time in the future:

bc. Date effective = ... /* future time */
versionedUserService.insert(userA,effective);
versionedUserService.update(userB,effective);
versionedUserService.remove(userC,effective);

It is only allowed to have one pending future time event per entity.

h2. Implementation and Example

The maven based Eclipse parent project holds the sub project @versent-base@ implementing the provided versioning feature by means of a jar library. It holds the entity base classes, the DAO base classes and interfaces. All other sub projects are just there for performing unit tests. They also show more sophisticated usage examples.
 
The parent project compiles to a Java Enterprise Application running and tested on JBOSS 6 and MySQL database. After appropriate configuration changes the code should also run on other application servers and databases.

h2. Special Considerations and Caveats

h3. Uniqueness constraints

As versioned entities holds not only the latest valid data record in the database but also the full history, you have to remove any uniqueness constraint from your particular entities. This means the uniqueness constraint is not checked by the database any longer. You should verify the constraint in your application code by yourself.

h3. Associations

Associations with an versioned entity are currently not supported. This may be supported in one of the next updates to this project.

h3. MySQL time precision

MySQL up to version 5.5 does not support Millisecond values on a DATETIME Column. This has some implications to the implementation, e.g. it is not possible to perform more than one updates to a particular entity within the time frame of 1 second.

h3. Deployment

In case of using MySQL database do not forget to copy the mysql-connector-java jar-file to the respective lib directory of your application server.                                                                    

h2. Feedback

For feedback or questions please contact guenkogit@gmail.com
